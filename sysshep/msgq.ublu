include sysshep/kill.ublu
include sysshep/serialize.ublu

# Get new messages from a message queue since time specified in temp file
FUNC sysshep.get_new_messages ( propertiesfile msgqueue timefile ) $[
    \\ ${ Set up timestamps.  lastlatest is the last run's latest timestamps.
    All timestamps newer than this one will be printed.  newlatest is the new
    latest timestamp, which will be set in the lastlatest file. }$
    LOCAL @lastlatest

    \\ ${ Try to serialize from the timefile, otherwise set it to epoch }$
    TRY $[
        sysshep.serialize.fromFile ( @@timefile )
        tuple -assign @lastlatest ~
    ]$ CATCH $[
        LOCAL @zero
        num -to @zero -long 0
        calljava -to @lastlatest -new java.util.GregorianCalendar
        calljava -- @lastlatest -method setTimeInMillis -primarg @zero
    ]$

    LOCAL @msgqueue
    test -to ~ -null @@msgqueue

    IF ~ THEN $[
        put -to @msgqueue /qsys.lib/qsysopr.msgq
    ]$ ELSE $[
        put -to @msgqueue @@msgqueue
    ]$

    LOCAL @newlatest
    calljava -to @newlatest -- @lastlatest -method clone

    props -read @@propertiesfile

    props -to ~ -get sysshep.password
    props -to ~ -get sysshep.username
    props -to ~ -get sysshep.host

    LOCAL @as400
    as400 -to @as400 ~ ~ ~

    LOCAL @messages
    msgq -as400 @as400 -to @messages -all @msgqueue

    LOCAL @messagelist
    list -to @messagelist -new

    FOR @message IN @messages $[
        LOCAL @date
        calljava -to @date -- @message -method getDate

        calljava -to ~ -- @date -method after -arg @lastlatest
        IF ~ THEN $[
            @messagelist -add @message

            calljava -to ~ -- @date -method after -arg @newlatest
            IF ~ THEN $[
                tuple -assign @newlatest @date
            ]$
        ]$
    ]$

    sysshep.serialize.toFile ( @newlatest @@timefile )
    tuple -assign ~ @messagelist
]$

# Print all messages from a message queue since the time specified in the
# temp file
FUNC sysshep.msgq ( propertiesfile msgqueue timefile ) $[
    \\ ${ Give a 10 minute timer before this script kills itself }$
    sysshep.killafter ( 600000 )

    sysshep.get_new_messages ( @@propertiesfile @@msgqueue @@timefile )

    LOCAL @messages
    tuple -assign @messages ~

    FOR @message IN @messages $[
        put @message
    ]$
    bye
]$

# Gets latest messages for a user and checks them for a substring
FUNC sysshep.msg_contains ( propertiesfile msgqueue timefile substring ) $[
    \\ ${ Give a 10 minute timer before this script kills itself }$
    sysshep.killafter ( 600000 )

    LOCAL @substring
    put -to @substring @@substring

    sysshep.get_new_messages ( @@propertiesfile @@msgqueue @@timefile )

    LOCAL @messages
    tuple -assign @messages ~

    \\ ${ dpoint needs an alertlevel even for crit and warn comparators }$
    LOCAL @dpoint
    dpoint -to @dpoint -dkey OS|AS400|MESSAGES -value 1 -type int -compare crit -alertlevel 0
    @dpoint -to @dpoint -addkey @msgqueue

    FOR @message in @messages $[
        LOCAL @body
        @message -to @body -message
        \\ ${ Need to cast the substring to hit the correct overload }$
        calljava -to ~ -- @body -method contains -castarg @substring java.lang.CharSequence

        \\ ${ Simply alarm using the body if the value was contained at all }$
        IF ~ THEN $[
            @dpoint -msg @body
        ]$
    ]$
    bye
]$

# Gets latest messages for a user and checks them for a regex match
FUNC sysshep.msg_matches ( propertiesfile msgqueue timefile pattern ignorepattern ) $[
    \\ ${ Give a 10 minute timer before this script kills itself }$
    sysshep.killafter ( 600000 )

    sysshep.get_new_messages ( @@propertiesfile @@msgqueue @@timefile )

    LOCAL @messages
    tuple -assign @messages ~

    \\ ${ dpoint needs an alertlevel even for crit and warn comparators }$
    LOCAL @dpoint
    dpoint -to @dpoint -dkey OS|AS400|MESSAGES -value 1 -type int -compare crit -alertlevel 0
    @dpoint -to @dpoint -addkey @msgqueue

    FOR @message in @messages $[
        LOCAL @body
        @message -to @body -message

        LOCAL @ignore

        test -to ~ -null @@ignorepattern
        IF ~ THEN $[
            \\ ${ Ignore nothing on null }$
            tuple -false @ignore
        ]$ ELSE $[
            calljava -to @ignore -- @body -method matches -arg @@ignorepattern
        ]$

        IF -! @ignore THEN $[
            calljava -to ~ -- @body -method matches -arg @@pattern

            \\ ${ Simply alarm using the body if the value was matched }$
            IF ~ THEN $[
                @dpoint -msg @body
            ]$
        ]$
    ]$
    bye
]$
